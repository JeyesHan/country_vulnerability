from __future__ import print_function,division
import pandas as pd
import numpy as np
from torch.utils.data import Dataset,DataLoader

"""
mydata = pd.read_csv('22.csv')
country_number = mydata.iloc[:,0].as_matrix()   #country_number type:numpy.ndarray
print('country number: {}'.format(country_number))
print('country number type: {}'.format(type(country_number)))
"""

class Countrydataset(Dataset):
    def __init__(self,csv_file,transform=None):
        self.csv_file = pd.read_csv(csv_file)
        self.transform = transform

    def __len__(self):
        return len(self.csv_file) - 1

    def __getitem__(self, index):
        country_ranks = np.array([self.csv_file.iloc[index,1]])
        country_aspects = (self.csv_file.iloc[index,2:].as_matrix())
        sample = {'country_ranks':country_ranks,'country_aspects':country_aspects}
        if self.transform:
            sample = self.transform(sample)
        return sample


def show_batch(sample_batched):
    """the method used to show the details of a mini_batch"""
    country_ranks_batch,country_aspects_batch = \
            sample_batched['country_ranks'],sample_batched['country_aspects']
    batch_size = len(country_ranks_batch)
    print('country ranks:{},  country aspects:{}'.format(country_ranks_batch.numpy(),
                                                            country_aspects_batch.numpy()))
def show_converted_dataset(data_loader):
    """the method used to show the converted dataset"""
    for batch_index,sample_batched in enumerate(data_loader):
        print('batch number:{}'.format(batch_index))
        print("ranks size:{}".format(sample_batched['country_ranks'].numpy().size))
        print("aspects size:{}".format(sample_batched['country_aspects'].numpy().shape))
        show_batch(sample_batched)

